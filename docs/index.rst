====================================
pyngrok - a Python wrapper for ngrok
====================================

.. image:: https://badge.fury.io/py/pyngrok.svg
   :target: https://badge.fury.io/py/pyngrok
.. image:: https://img.shields.io/pypi/pyversions/pyngrok.svg
   :target: https://pypi.org/project/pyngrok/
.. image:: https://img.shields.io/pypi/implementation/pyngrok.svg
   :target: https://pypi.org/project/pyngrok/
.. image:: https://img.shields.io/pypi/l/pyngrok.svg
   :target: https://pypi.org/project/pyngrok/
.. image:: https://img.shields.io/badge/Donate-PayPal-green.svg
   :target: https://www.paypal.me/alexdlaird

:code:`pyngrok` is a Python wrapper for `ngrok <https://ngrok.com/>`_ that manages its own binary and puts
it on our path, making :code:`ngrok` readily available from anywhere on the command line and via a
convenient Python API.

Installation
------------

:code:`pyngrok` is available on `PyPI <https://pypi.org/project/pyngrok/>`_ and can be installed
using :code:`pip`.

.. code-block:: sh

   pip install pyngrok

That's it! :code:`pyngrok` is now available `as a package to our Python projects <#open-a-tunnel>`_,
and :code:`ngrok` is now available `from the command line <#command-line-usage>`_.

Open a Tunnel
-------------

To open a tunnel, use the :code:`connect()` method, which returns the public URL generated by :code:`ngrok`.

.. code-block:: python

   from pyngrok import ngrok

   # Open a tunnel on the default port 80
   public_url = ngrok.connect()

The :code:`connect()` method takes an optional :code:`options` parameter, which allows us to pass additional
options that are `supported by ngrok <https://ngrok.com/docs#tunnel-definitions>`_,
`as shown below <#passing-options>`__.

Get Active Tunnels
------------------

It can be useful to ask the :code:`ngrok` client what tunnels are currently open. This can be
accomplished with the :code:`get_tunnels()` method, which returns a list of :code:`NgrokTunnel` objects.

.. code-block:: python

   from pyngrok import ngrok

   tunnels = ngrok.get_tunnels()
   # A public ngrok URL that tunnels to port 80 (ex. http://<public_sub>.ngrok.io)
   public_url = tunnels[0].public_url

Close a Tunnel
--------------

All open tunnels will automatically be closed when the Python process terminates, but we can
also close them manually.

.. code-block:: python

   from pyngrok import ngrok

   public_url = "http://<public_sub>.ngrok.io"

   ngrok.disconnect(public_url)

The :code:`ngrok` Process
-------------------------

Opening a tunnel will start the :code:`ngrok` process. This process will remain alive, and the tunnels
open, until :code:`ngrok.kill()` is invoked, or until the Python process terminates.

If we are building a short-lived app, for instance a CLI, we may want to block on the :code:`ngrok`
process so tunnels stay open until the user intervenes. We can do that by accessing the :code:`NgrokProcess`.

.. code-block:: python

   from pyngrok import ngrok

   ngrok_process = ngrok.get_ngrok_process()

   try:
       # Block until CTRL-C or some other terminating event
       ngrok_process.process.wait()
   except KeyboardInterrupt:
       print(' Shutting down server.')

       ngrok.kill()

The :code:`NgrokProcess` also contains an :code:`api_url` variable, usually initialized to
:code:`http://127.0.0.1:4040`, from which we can access the `ngrok client API <https://ngrok.com/docs#client-api>`_.

If some feature we need is not available in this package, the client API is accessible to us via the
:code:`api_request()` method. Additionally, the :code:`NgrokTunnel` objects expose a :code:`uri` variable, which
contains the relative path used to manipulate that resource against the client API. This package also gives us
access to :code:`ngrok` from the command line, `as shown below <#command-line-usage>`__.

Configuration
-------------

Setting the :code:`authtoken`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Running :code:`ngrok` with an auth token enables additional features available on our account (for
instance, the ability to open multiple tunnels concurrently). We can obtain our auth token from
the `ngrok dashboard <https://dashboard.ngrok.com>`_ and install it like this:

.. code-block:: python

   from pyngrok import ngrok

   ngrok.set_auth_token("<NGROK_AUTH_TOKEN>")

   # Once an auth token is set, we are able to open multiple tunnels at the same time
   ngrok.connect()
   ngrok.connect(8000)

We can also override the auth token when necessary with:

.. code-block:: python

   from pyngrok import ngrok

   ngrok.connect(auth_token="<NGROK_AUTH_TOKEN>")

The above will only work when :code:`ngrok` is first starting, so if a tunnel has already
been started in the session, we will need to :code:`kill()` it first.

Setting the :code:`region`
~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, :code:`ngrok` will open a tunnel in the :code:`us` region. To override this, use
the :code:`region` parameter:

.. code-block:: python

   from pyngrok import ngrok

   url = ngrok.connect(region="au")

Passing :code:`options`
~~~~~~~~~~~~~~~~~~~~~~~

It is also possible to configure the tunnel when it is created, for instance adding authentication,
a subdomain, or other tunnel parameters `supported by ngrok <https://ngrok.com/docs#tunnel-definitions>`_.
These can be passed to the tunnel with the :code:`options` parameter.

Here is an example starting :code:`ngrok` in Australia, then opening a tunnel for with subdomain
:code:`foo` that requires basic authentication for requests.

.. code-block:: python

   from pyngrok import ngrok

   url = ngrok.connect(region="au", options={"subdomain": "foo", "auth": "username:password"})

Config File
~~~~~~~~~~~

The default `ngrok config file <https://ngrok.com/docs#config>`_ lives in the home
directory's :code:`.ngrok2` folder. We can change this in one of two ways. Either pass the
:code:`config_path` parameter to methods:

.. code-block:: python

   from pyngrok import ngrok

   CONFIG_PATH = "/opt/ngrok/config.yml"

   ngrok.connect(config_path=CONFIG_PATH)

or override the :code:`DEFAULT_CONFIG_PATH` variable:

.. code-block:: python

   from pyngrok import ngrok

   ngrok.DEFAULT_CONFIG_PATH = "/opt/ngrok/config.yml"

   ngrok.set_auth_token("<NGROK_AUTH_TOKEN>")

Binary Path
~~~~~~~~~~~

The :code:`pyngrok` package manages its own :code:`ngrok` binary. However, we can use our :code:`ngrok` binary if we
want in one of two ways.  Either pass the :code:`ngrok_path` parameter to methods:

.. code-block:: python

   from pyngrok import ngrok

   NGROK_PATH = "/usr/local/bin/ngrok"

   ngrok.get_tunnels(ngrok_path=NGROK_PATH)

or override the :code:`DEFAULT_NGROK_PATH` variable:

.. code-block:: python

   from pyngrok import ngrok

   ngrok.DEFAULT_NGROK_PATH = "/usr/local/bin/ngrok"

   ngrok.connect()

Command Line Usage
------------------

This package also puts the default :code:`ngrok` binary on our path, so all features of :code:`ngrok` are also
available on the command line.

.. code-block:: sh

   ngrok http 80

For details on how to fully leverage `ngrok` from the command line, see `ngrok's official documentation <https://ngrok.com/docs>`_.

API Documentation
-----------------

For more advanced usage, have a look at the :doc:`API documentation for pyngrok <api>` to understand the
public interfaces available to developers.

.. mdinclude:: ../CONTRIBUTING.md
