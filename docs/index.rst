====================================
pyngrok - a Python wrapper for ngrok
====================================

.. image:: https://badge.fury.io/py/pyngrok.svg
   :target: https://badge.fury.io/py/pyngrok
.. image:: https://travis-ci.org/alexdlaird/pyngrok.svg?branch=master
   :target: https://travis-ci.org/alexdlaird/pyngrok
.. image:: https://codecov.io/gh/alexdlaird/pyngrok/branch/master/graph/badge.svg
   :target: https://codecov.io/gh/alexdlaird/pyngrok
.. image:: https://readthedocs.org/projects/pyngrok/badge/?version=latest
   :target: https://pyngrok.readthedocs.io/en/latest/?badge=latest
.. image:: https://img.shields.io/pypi/pyversions/pyngrok.svg
   :target: https://pypi.org/project/pyngrok/
.. image:: https://img.shields.io/pypi/l/pyngrok.svg
   :target: https://pypi.org/project/pyngrok/

:code:`pyngrok` is a Python wrapper for :code:`ngrok` that manages its own binary and puts it on your path,
making :code:`ngrok` readily available from anywhere on the command line and via a convenient Python API.

`ngrok <https://ngrok.com>`_ is a reverse proxy tool that opens secure tunnels from public URLs to localhost, perfect
for exposing local web servers, building webhook integrations, enabling SSH access, testing chatbots, demoing from
your own machine, and more, made even more powerful with native Python integration through :code:`pyngrok`.

Installation
------------

:code:`pyngrok` is available on `PyPI <https://pypi.org/project/pyngrok/>`_ and can be installed
using :code:`pip`.

.. code-block:: sh

    pip install pyngrok

That's it! :code:`pyngrok` is now available `as a package to our Python projects <#open-a-tunnel>`_,
and :code:`ngrok` is now available `from the command line <#command-line-usage>`_.

Open a Tunnel
-------------

To open a tunnel, use the :code:`connect()` method, which returns the public URL generated by :code:`ngrok`.

.. code-block:: python

    from pyngrok import ngrok

    # Open a HTTP tunnel on the default port 80
    public_url = ngrok.connect()
    # Open a SSH tunnel
    ssh_url = ngrok.connect(22, "tcp")

The :code:`connect()` method takes an optional :code:`options` parameter, which allows us to pass additional
options that are `supported by ngrok <https://ngrok.com/docs#tunnel-definitions>`_,
`as shown below <#passing-options>`__.

Get Active Tunnels
------------------

It can be useful to ask the :code:`ngrok` client what tunnels are currently open. This can be
accomplished with the :code:`get_tunnels()` method, which returns a list of :code:`NgrokTunnel` objects.

.. code-block:: python

    from pyngrok import ngrok

    tunnels = ngrok.get_tunnels()
    # A public ngrok URL that tunnels to port 80 (ex. http://<public_sub>.ngrok.io)
    public_url = tunnels[0].public_url

Close a Tunnel
--------------

All open tunnels will automatically be closed when the Python process terminates, but we can
also close them manually.

.. code-block:: python

    from pyngrok import ngrok

    public_url = "http://<public_sub>.ngrok.io"

    ngrok.disconnect(public_url)

The :code:`ngrok` Process
-------------------------

Opening a tunnel will start the :code:`ngrok` process. This process will remain alive, and the tunnels
open, until :code:`ngrok.kill()` is invoked, or until the Python process terminates.

If we are building a short-lived app, for instance a CLI, we may want to block on the :code:`ngrok`
process so tunnels stay open until the user intervenes. We can do that by accessing the :code:`NgrokProcess`.

.. code-block:: python

    from pyngrok import ngrok

    ngrok_process = ngrok.get_ngrok_process()

    try:
        # Block until CTRL-C or some other terminating event
        ngrok_process.process.wait()
    except KeyboardInterrupt:
        print(" Shutting down server.")

        ngrok.kill()

The :code:`NgrokProcess` also contains an :code:`api_url` variable, usually initialized to
:code:`http://127.0.0.1:4040`, from which we can access the `ngrok client API <https://ngrok.com/docs#client-api>`_.

.. note::

    If some feature we need is not available in this package, the client API is accessible to us via the
    `api_request() <https://pyngrok.readthedocs.io/en/latest/api.html#pyngrok.ngrok.api_request>`_ method. Additionally,
    the `NgrokTunnel <https://pyngrok.readthedocs.io/en/latest/api.html#pyngrok.ngrok.NgrokTunnel>`_ objects expose a
    :code:`uri` variable, which contains the relative path used to manipulate that resource against the client API.
    This package also gives us access to :code:`ngrok` from the command line, `as shown below <#command-line-usage>`__.

Expose Other Service
--------------------

Using :code:`ngrok` we can expose any number of non-HTTP services, for instances databases, game servers, etc. This
can be accomplished by using :code:`pyngrok` to open a :code:`tcp` tunnel to the desired service.

.. code-block:: python

    from pyngrok import ngrok

    # Open a tunnel to MySQL with a Reserved TCP Address
    ngrok.connect(3306, "tcp", options={"remote_addr": "1.tcp.ngrok.io:12345")


Configuration
-------------

Setting the :code:`authtoken`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Running :code:`ngrok` with an auth token enables additional features available on our account (for
instance, the ability to open multiple tunnels concurrently). We can obtain our auth token from
the `ngrok dashboard <https://dashboard.ngrok.com>`_ and install it like this:

.. code-block:: python

    from pyngrok import ngrok

    ngrok.set_auth_token("<NGROK_AUTH_TOKEN>")

    # Once an auth token is set, we are able to open multiple tunnels at the same time
    ngrok.connect()
    ngrok.connect(8000)

We can also override the auth token when necessary with:

.. code-block:: python

    from pyngrok import ngrok

    ngrok.connect(auth_token="<NGROK_AUTH_TOKEN>")

The above will only work when :code:`ngrok` is first starting, so if a tunnel has already
been started in the session, we will need to :code:`kill()` it first.

Setting the :code:`region`
~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, :code:`ngrok` will open a tunnel in the :code:`us` region. To override this, use
the :code:`region` parameter:

.. code-block:: python

    from pyngrok import ngrok

    url = ngrok.connect(region="au")

Passing :code:`options`
~~~~~~~~~~~~~~~~~~~~~~~

It is also possible to configure the tunnel when it is created, for instance adding authentication,
a subdomain, or other tunnel parameters `supported by ngrok <https://ngrok.com/docs#tunnel-definitions>`_.
These can be passed to the tunnel with the :code:`options` parameter.

Here is an example starting :code:`ngrok` in Australia, then opening a tunnel for with subdomain
:code:`foo` that requires basic authentication for requests.

.. code-block:: python

    from pyngrok import ngrok

    url = ngrok.connect(region="au", options={"subdomain": "foo", "auth": "username:password"})

Config File
~~~~~~~~~~~

The default `ngrok config file <https://ngrok.com/docs#config>`_ lives in the home
directory's :code:`.ngrok2` folder. We can change this in one of two ways. Either pass the
:code:`config_path` parameter to methods:

.. code-block:: python

    from pyngrok import ngrok

    CONFIG_PATH = "/opt/ngrok/config.yml"

    ngrok.connect(config_path=CONFIG_PATH)

or override the :code:`DEFAULT_CONFIG_PATH` variable:

.. code-block:: python

    from pyngrok import ngrok

    ngrok.DEFAULT_CONFIG_PATH = "/opt/ngrok/config.yml"

    ngrok.set_auth_token("<NGROK_AUTH_TOKEN>")

Binary Path
~~~~~~~~~~~

The :code:`pyngrok` package manages its own :code:`ngrok` binary. However, we can use our :code:`ngrok` binary if we
want in one of two ways.  Either pass the :code:`ngrok_path` parameter to methods:

.. code-block:: python

    from pyngrok import ngrok

    NGROK_PATH = "/usr/local/bin/ngrok"

    ngrok.get_tunnels(ngrok_path=NGROK_PATH)

or override the :code:`DEFAULT_NGROK_PATH` variable:

.. code-block:: python

    from pyngrok import ngrok

    ngrok.DEFAULT_NGROK_PATH = "/usr/local/bin/ngrok"

    ngrok.connect()

Command Line Usage
------------------

This package also puts the default :code:`ngrok` binary on our path, so all features of :code:`ngrok` are also
available on the command line.

.. code-block:: sh

    ngrok http 80

For details on how to fully leverage `ngrok` from the command line, see `ngrok's official documentation <https://ngrok.com/docs>`_.

Dive Deeper
-----------

For more advanced usage, integration examples, and tips to troubleshoot common issues, dive deeper in to the rest of
the documentation.

.. toctree::
   :maxdepth: 2

   api
   integrations
   troubleshooting

.. include:: ../CONTRIBUTING.rst
