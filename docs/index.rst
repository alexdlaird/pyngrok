.. rst-class:: hide-me

************************************
pyngrok - A Python wrapper for ngrok
************************************

.. image:: _html/logo.png
   :alt: pyngrok - a Python wrapper for ngrok
   :align: center

.. image:: https://img.shields.io/pypi/v/pyngrok
   :target: https://pypi.org/project/pyngrok
.. image:: https://img.shields.io/pypi/pyversions/pyngrok.svg
   :target: https://pypi.org/project/pyngrok
.. image:: https://img.shields.io/codecov/c/github/alexdlaird/pyngrok
   :target: https://codecov.io/gh/alexdlaird/pyngrok
.. image:: https://img.shields.io/github/actions/workflow/status/alexdlaird/pyngrok/build.yml
   :target: https://github.com/alexdlaird/pyngrok/actions/workflows/build.yml
.. image:: https://app.codacy.com/project/badge/Grade/b055cf6e3f1745098fab86a2923730b3
   :target: https://app.codacy.com/gh/alexdlaird/pyngrok/dashboard?utm_source=gh&utm_medium=referral&utm_content=&utm_campaign=Badge_grade
.. image:: https://img.shields.io/readthedocs/pyngrok
   :target: https://pyngrok.readthedocs.io/en/latest
.. image:: https://img.shields.io/github/license/alexdlaird/pyngrok
   :target: https://github.com/alexdlaird/pyngrok

``pyngrok`` is a Python wrapper for ``ngrok`` that manages its own binary, making ``ngrok`` available via a convenient
Python API and the command line.

`ngrok <https://ngrok.com>`_ is a reverse proxy that opens secure tunnels from public URLs to localhost. It's perfect for rapid
development (test webhooks, demo local websites, enable SSH access), establishing ingress to external
networks and devices, building production APIs (traffic policies, OAuth, load balancing), and more. And
it's made even more powerful with native Python integration through the ``pyngrok`` client.

Installation
============

``pyngrok`` is available on `PyPI <https://pypi.org/project/pyngrok/>`_ and can be installed
using ``pip``:

.. code-block:: sh

    pip install pyngrok

or ``conda``:

.. code-block:: sh

    conda install -c conda-forge pyngrok

That's it! ``pyngrok`` is now available `as a package to your Python projects <#open-a-tunnel>`_,
and ``ngrok`` is now available `from the command line <#command-line-usage>`_.

Open a Tunnel
=============

To open a tunnel, use the :func:`~pyngrok.ngrok.connect` method, which returns a :class:`~pyngrok.ngrok.NgrokTunnel`,
and this returned object has a reference to the public URL generated by ``ngrok`` in its
:attr:`~pyngrok.ngrok.NgrokTunnel.public_url` attribute.

.. code-block:: python

    from pyngrok import ngrok

    # Open a HTTP tunnel on the default port 80
    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    http_tunnel = ngrok.connect()

    # Open a SSH tunnel
    # <NgrokTunnel: "tcp://0.tcp.ngrok.io:12345" -> "localhost:22">
    ssh_tunnel = ngrok.connect("22", "tcp")

    # Open a named tunnel from the config file
    named_tunnel = ngrok.connect(name="my-config-file-tunnel")

    # Open an Internal Endpoint that's load balanced
    # <NgrokTunnel: "https://some-endpoint.internal" -> "http://localhost:9000">
    internal_endpoint = ngrok.connect(addr="9000",
                                      domain="some-endpoint.internal",
                                      pooling_enabled=True)

The :func:`~pyngrok.ngrok.connect` method takes ``kwargs`` as well, which allows you to pass
additional tunnel configurations that are supported by ``ngrok`` (or the ``name`` of a tunnel defined in ``ngrok``'s
config file), `as documented here <#tunnel-configurations>`__.

.. note::

    ``ngrok`` v2's default behavior for ``http`` when no additional properties are passed is to open *two* tunnels,
    one ``http`` and one ``https``. ``pyngrok``'s :func:`~pyngrok.ngrok.connect` method will return a reference to
    the ``http`` tunnel in this case. If only a single tunnel is needed, pass ``bind_tls=True`` and a reference to
    the ``https`` tunnel will be returned.

``ngrok``'s Edges
-----------------

.. note::

    ``ngrok`` has deprecated Edges and will sunset Labeled Tunnels on December 31st, 2025. See
    `this issue <https://github.com/alexdlaird/pyngrok/issues/145>`_ for more details.

To use `ngrok's Edges <https://ngrok.com/docs/universal-gateway/edges/>`_ with ``pyngrok``, first `configure an Edge on ngrok's dashboard <https://dashboard.ngrok.com/edges>`_
(with at least one Endpoint mapped to the Edge), and define a labeled tunnel in `the ngrok config file <https://ngrok.com/docs/agent/config/v2/#define-two-labeled-tunnels>`_
that points to the Edge.

.. code-block:: yaml

    tunnels:
      some-edge-tunnel:
        labels:
          - edge=my_edge_id
        addr: http://localhost:80

To start a labeled tunnel in ``pyngrok``, pass its ``name`` to :func:`~pyngrok.ngrok.connect`.

.. code-block:: python

    from pyngrok import ngrok

    # Open the Edge tunnel that is defined in the config file
    named_tunnel = ngrok.connect(name="some-edge-tunnel")

Once an Edge tunnel is started, it can be managed through `ngrok's dashboard <https://dashboard.ngrok.com/edges>`_.

Get Active Tunnels
------------------

It can be useful to ask the ``ngrok`` client what tunnels are currently open. This can be
accomplished with the :func:`~pyngrok.ngrok.get_tunnels` method, which returns a list of
:class:`~pyngrok.ngrok.NgrokTunnel` objects.

.. code-block:: python

    from pyngrok import ngrok

    # [<NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">]
    tunnels = ngrok.get_tunnels()

Close a Tunnel
--------------

All open tunnels will automatically be closed when the Python process terminates, but you can
also close them manually with :func:`~pyngrok.ngrok.disconnect`.

.. code-block:: python

    from pyngrok import ngrok

    # The NgrokTunnel returned from methods like connect(),
    # get_tunnels(), etc. contains the public URL
    ngrok.disconnect(ngrok_tunnel.public_url)

Expose Other Services
---------------------

Using ``ngrok`` you can expose any number of non-HTTP services, for instances databases, game servers, etc. This
can be accomplished by using ``pyngrok`` to open a ``tcp`` tunnel to the desired service.

.. code-block:: python

    from pyngrok import ngrok

    # Open a tunnel to MySQL with a Reserved TCP Address
    # <NgrokTunnel: "tcp://1.tcp.ngrok.io:12345" -> "localhost:3306">
    ngrok.connect("3306",
                  "tcp",
                  remote_addr="1.tcp.ngrok.io:12345")

You can also serve up local directories via `ngrok's built-in fileserver <https://ngrok.com/docs/universal-gateway/http/?cty=agent-config#agent-endpoint>`_.

.. code-block:: python

    from pyngrok import ngrok

    # Open a tunnel to a local file server
    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "file:///">
    ngrok.connect("file:///")

Tunnel Configurations
---------------------

It is possible to configure the tunnel when it is created, for instance adding authentication,
a subdomain, or other additional `tunnel configurations that are supported by ngrok <https://ngrok.com/docs/agent/config/v2/#common-tunnel-configuration-properties>`_.
This is accomplished by passing them as ``kwargs`` to :func:`~pyngrok.ngrok.connect`, then they will be used as
properties for the tunnel when it is created.

Here is an example that opens a tunnel with subdomain ``foo``, requires basic authentication for requests, and defines a
circuit breaker.

.. code-block:: python

    from pyngrok import conf, ngrok

    # <NgrokTunnel: "https://foo.au.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect(subdomain="foo",
                                 auth="username:password",
                                 circuit_breaker=50)

If you already have a tunnel `defined in ngrok's config file <https://ngrok.com/docs/agent/config/v2/#tunnel-configurations>`_,
you can start it by its ``name`` (note that "-api" will be appended to its name when started).

.. code-block:: python

    from pyngrok import conf, ngrok

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:??">
    ngrok_tunnel = ngrok.connect(name="my-config-file-tunnel")


``ngrok``'s API
===============

The `api <https://pyngrok.readthedocs.io/en/latest/api.html#pyngrok.ngrok.api>`_ method allows you to use the local
``ngrok`` agent to make requests against `the ngrok API <https://ngrok.com/docs/agent/cli-api/>`_, if you have
`set an API key <https://pyngrok.readthedocs.io/en/latest/#setting-the-authtoken-or-api-key>`_.
For example, here's how you would reserve a ``ngrok`` domain, then create a Cloud Endpoint with an associated traffic
policy:

.. code-block:: python

    from pyngrok import ngrok

    domain = "some-domain.ngrok.dev"
    ngrok.api("reserved-domains", "create",
              "--domain", domain)
    ngrok.api("endpoints", "create",
              "--bindings", "public",
              "--url", f"https://{domain}",
              "--traffic-policy-file", "policy.yml")

The ``ngrok`` Process
=====================

Opening a tunnel will start the ``ngrok`` process. This process will remain alive, and the tunnels
open, until :func:`~pyngrok.ngrok.kill()` is invoked, or until the Python process terminates.

If you are building a short-lived app, for instance a CLI, you may want to block on the ``ngrok``
process so tunnels stay open until the user intervenes. You can do that by accessing the
:class:`~pyngrok.process.NgrokProcess`.

.. code-block:: python

    from pyngrok import ngrok

    ngrok_process = ngrok.get_ngrok_process()

    try:
        # Block until CTRL-C or some other terminating event
        ngrok_process.proc.wait()
    except KeyboardInterrupt:
        print(" Shutting down server.")

        ngrok.kill()

The :class:`~pyngrok.process.NgrokProcess` contains an ``api_url`` variable, usually initialized to
http://127.0.0.1:4040, from which you can access the `ngrok client API <https://ngrok.com/docs/agent/api>`_.

.. note::

    If some feature you need is not available in this package, the client API is accessible to you via the
    :func:`~pyngrok.ngrok.api_request` method. Additionally, the :class:`~pyngrok.ngrok.NgrokTunnel` objects expose a
    ``uri`` variable, which contains the relative path used to manipulate that resource against the client API.

    This package also gives you access to ``ngrok`` from the command line, `as documented here <#command-line-usage>`__.

Event Logs
----------

When ``ngrok`` emits logs, ``pyngrok`` can surface them to a callback function. To register this
callback, use :class:`~pyngrok.conf.PyngrokConfig` and pass the function as ``log_event_callback``. Each time a
log is processed, this function will be called, passing a :class:`~pyngrok.log.NgrokLog` as its only parameter.

.. code-block:: python

    from pyngrok import conf, ngrok

    def log_event_callback(log):
        print(str(log))

    conf.get_default().log_event_callback = log_event_callback

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()


If these events aren't necessary for your use case, some resources can be freed up by turning them off. Set
``monitor_thread`` to ``False`` in :class:`~pyngrok.conf.PyngrokConfig`.

.. code-block:: python

    from pyngrok import conf, ngrok

    conf.get_default().monitor_thread = False

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()

Alternatively, :func:`~pyngrok.process.NgrokProcess.stop_monitor_thread` can be used to stop monitoring on a
running process.

.. code-block:: python

    import time

    from pyngrok import ngrok

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()
    time.sleep(1)
    ngrok.get_ngrok_process().stop_monitor_thread()

Configuration
=============

``PyngrokConfig``
-----------------

``pyngrok``'s interactions with the ``ngrok`` binary can be configured using :class:`~pyngrok.conf.PyngrokConfig`.
The default ``pyngrok_config`` object can updated with your own object using :func:`~pyngrok.conf.set_default`.

.. code-block:: python

    from pyngrok import conf

    pyngrok_config = conf.PyngrokConfig(log_event_callback=log_event_callback,
                                        max_logs=10)
    conf.set_default(pyngrok_config)

Most methods in the :mod:`~pyngrok.ngrok` module also accept a ``pyngrok_config`` keyword arg, which can be used
to pass in the config rather than updating the default as shown above.

The ``pyngrok_config`` argument is only used when the ``ngrok`` process is first started, which will be
the first time most methods in the :mod:`~pyngrok.ngrok` module are called. You can check if a process is already or
still running by calling its :func:`~pyngrok.process.NgrokProcess.healthy` method.

.. note::

    If ``ngrok`` is not already installed at the ``ngrok_path`` in :class:`~pyngrok.conf.PyngrokConfig`, it
    will be installed the first time most methods in the :mod:`~pyngrok.ngrok` module are called.

    If you need to customize the installation of ``ngrok``, perhaps specifying a timeout, proxy, use a custom mirror
    for the download, etc., you can do so by leveraging the :mod:`~pyngrok.installer` module. Keyword arguments in this
    module are ultimately passed down to :py:func:`urllib.request.urlopen`, so as long as you use the
    :mod:`~pyngrok.installer` module yourself prior to invoking any :mod:`~pyngrok.ngrok` methods, you can can control
    how ``ngrok`` is installed and from where.

Setting the ``authtoken`` or ``api_key``
----------------------------------------

Running ``ngrok`` with an auth token and  API key enables access to more features available on your account (for
instance, multiple concurrent tunnels, custom domains, use of
`Internal Endpoints <https://ngrok.com/docs/universal-gateway/internal-endpoints/>`_, etc). You can obtain your
auth token and generate API keys from the `ngrok dashboard <https://dashboard.ngrok.com>`_, then install in to
``ngrok``'s config file.

.. code-block:: python

    from pyngrok import ngrok

    # Setting an auth token allows you to open multiple
    # tunnels at the same time
    ngrok.set_auth_token("<NGROK_AUTHTOKEN>")
    # Setting an API key allows you to use things like Internal Endpoints
    ngrok.set_api_key("<NGROK_API_KEY>")

    # <NgrokTunnel: "https://<public_sub1>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel1 = ngrok.connect()
    # <NgrokTunnel: "https://<public_sub2>.ngrok.io" -> "http://localhost:8000">
    ngrok_tunnel2 = ngrok.connect("8000")
    # <NgrokTunnel: "tls://some-endpoint.internal" -> "localhost:9000">
    internal_endpoint = ngrok.connect(addr="9000",
                                      proto="tls",
                                      domain="some-endpoint.internal",
                                      pooling_enabled=True)

You can also override ``ngrok``'s installed auth token or API key using :class:`~pyngrok.conf.PyngrokConfig`.

.. code-block:: python

    from pyngrok import conf, ngrok

    conf.get_default().auth_token = "<NGROK_AUTHTOKEN>"
    conf.get_default().api_key = "<NGROK_API_KEY>"

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()

Lastly, you could instead define ``NGROK_AUTHTOKEN`` or ``NGROK_API_KEY`` as environment variables, if you don't want
to define them in code.

Setting the ``region``
----------------------

By default, ``ngrok`` will open a tunnel in the ``us`` region. To override this, use
the ``region`` parameter in :class:`~pyngrok.conf.PyngrokConfig`.

.. code-block:: python

    from pyngrok import conf, ngrok

    conf.get_default().region = "au"

    # <NgrokTunnel: "https://<public_sub>.au.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()

Config File
-----------

By default, ngrok will look for its config file in `the default location <https://ngrok.com/docs/agent/config/#default-locations>`_.
You can override this behavior by updating your default :class:`~pyngrok.conf.PyngrokConfig`.

.. code-block:: python

    from pyngrok import conf, ngrok

    conf.get_default().config_path = "/opt/ngrok/config.yml"

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()

Binary Path
-----------

The ``pyngrok`` package manages its own ``ngrok`` binary. You can use your ``ngrok`` binary if you want
by updating the default :class:`~pyngrok.conf.PyngrokConfig`.

.. code-block:: python

    from pyngrok import conf, ngrok

    conf.get_default().ngrok_path = "/usr/local/bin/ngrok"

    # <NgrokTunnel: "https://<public_sub>.ngrok.io" -> "http://localhost:80">
    ngrok_tunnel = ngrok.connect()

``ngrok`` Version Compatibility
-------------------------------

``pyngrok`` is compatible with ``ngrok`` v2 and v3, but by default it will install v3. To install v2 instead,
set ``ngrok_version`` in :class:`~pyngrok.conf.PyngrokConfig`.

.. code-block:: python

    from pyngrok import conf, ngrok

    conf.get_default().ngrok_version = "v2"

Command Line Usage
==================

This package puts the default ``ngrok`` binary on your path, so all features of ``ngrok`` are also
available on the command line.

.. code-block:: sh

    ngrok http 80

For details on how to fully leverage ``ngrok`` from the command line, see `ngrok's official documentation <https://ngrok.com/docs/agent/cli/>`_.

Dive Deeper
===========

For more advanced usage, integration examples, and tips to troubleshoot common issues, dive deeper in to the rest of
the documentation.

.. toctree::
   :maxdepth: 2

   api
   integrations
   troubleshooting

.. include:: ../CONTRIBUTING.rst
